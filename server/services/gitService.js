const simpleGit = require('simple-git');
const path = require('path');
const fs = require('fs');
const { getDatabase } = require('../database/init');

const gitRepoPath = path.join(__dirname, '../../rsvp-data');
let git = null; // Initialize git instance later

class GitService {
  constructor() {
    this.repoPath = gitRepoPath;
    this.ensureRepoExists();
    this.initializeGitInstance();
  }

  ensureRepoExists() {
    if (!fs.existsSync(this.repoPath)) {
      fs.mkdirSync(this.repoPath, { recursive: true });
    }
  }

  initializeGitInstance() {
    // Only initialize git instance after directory exists
    if (fs.existsSync(this.repoPath)) {
      git = simpleGit(gitRepoPath);
    }
  }

  async ensureGitInstance() {
    if (!git) {
      this.ensureRepoExists();
      this.initializeGitInstance();
    }
    return git;
  }

  async initializeGitRepo() {
    try {
      const gitInstance = await this.ensureGitInstance();
      if (!fs.existsSync(path.join(this.repoPath, '.git'))) {
        await gitInstance.init();
        await gitInstance.addConfig('user.name', 'RSVP System');
        await gitInstance.addConfig('user.email', 'rsvp@system.com');
        
        // Create initial README
        const readmeContent = `# RSVP Event Data

This repository contains all RSVP event data and attendee information.

## Structure
- Each event gets its own folder
- Event folders contain attendee lists and details
- Data is automatically synchronized with the database

## Last Updated
${new Date().toISOString()}
`;
        
        fs.writeFileSync(path.join(this.repoPath, 'README.md'), readmeContent);
        await gitInstance.add('.');
        await gitInstance.commit('Initial commit: RSVP system setup');
        
        console.log('✅ Git repository initialized successfully');
      }
    } catch (error) {
      console.error('Error initializing Git repo:', error);
      throw error;
    }
  }

  async createEventFolder(eventId, eventTitle) {
    try {
      const sanitizedTitle = this.sanitizeFolderName(eventTitle);
      const eventFolderPath = path.join(this.repoPath, `event-${eventId}-${sanitizedTitle}`);
      
      if (!fs.existsSync(eventFolderPath)) {
        fs.mkdirSync(eventFolderPath, { recursive: true });
        
        // Create event info file
        const eventInfo = {
          eventId,
          title: eventTitle,
          createdAt: new Date().toISOString(),
          lastUpdated: new Date().toISOString()
        };
        
        fs.writeFileSync(
          path.join(eventFolderPath, 'event-info.json'), 
          JSON.stringify(eventInfo, null, 2)
        );
        
        // Create attendees file
        const attendeesFile = path.join(eventFolderPath, 'attendees.json');
        fs.writeFileSync(attendeesFile, JSON.stringify([], null, 2));
        
        // Create summary file
        const summaryFile = path.join(eventFolderPath, 'summary.md');
        const summaryContent = `# ${eventTitle}

## Event Summary
- **Event ID**: ${eventId}
- **Created**: ${new Date().toLocaleDateString()}
- **Status**: Active

## Attendees
*No attendees yet*

---
*This file is automatically generated and updated by the RSVP system.*
`;
        
        fs.writeFileSync(summaryFile, summaryContent);
        
        // Commit the new event folder
        const gitInstance = await this.ensureGitInstance();
        await gitInstance.add('.');
        await gitInstance.commit(`Add event: ${eventTitle} (ID: ${eventId})`);
        
        console.log(`✅ Created event folder: ${eventFolderPath}`);
        return eventFolderPath;
      }
      
      return eventFolderPath;
    } catch (error) {
      console.error('Error creating event folder:', error);
      throw error;
    }
  }

  async updateEventData(eventId, eventTitle, attendees) {
    try {
      const sanitizedTitle = this.sanitizeFolderName(eventTitle);
      const eventFolderPath = path.join(this.repoPath, `event-${eventId}-${sanitizedTitle}`);
      
      if (!fs.existsSync(eventFolderPath)) {
        await this.createEventFolder(eventId, eventTitle);
      }
      
      // Update attendees file
      const attendeesFile = path.join(eventFolderPath, 'attendees.json');
      fs.writeFileSync(attendeesFile, JSON.stringify(attendees, null, 2));
      
      // Update summary file
      const summaryFile = path.join(eventFolderPath, 'summary.md');
      const confirmedCount = attendees.filter(a => a.status === 'confirmed').length;
      const pendingCount = attendees.filter(a => a.status === 'pending').length;
      const declinedCount = attendees.filter(a => a.status === 'declined').length;
      
      const summaryContent = `# ${eventTitle}

## Event Summary
- **Event ID**: ${eventId}
- **Created**: ${new Date().toLocaleDateString()}
- **Status**: Active
- **Last Updated**: ${new Date().toLocaleString()}

## Attendee Statistics
- **Confirmed**: ${confirmedCount}
- **Pending**: ${pendingCount}
- **Declined**: ${declinedCount}
- **Total**: ${attendees.length}

## Attendee List
${attendees.map(attendee => 
  `- **${attendee.name}** (${attendee.status})${attendee.plus_one ? ` + ${attendee.plus_one_name}` : ''}`
).join('\n')}

---
*This file is automatically generated and updated by the RSVP system.*
`;
      
      fs.writeFileSync(summaryFile, summaryContent);
      
      // Update event info
      const eventInfoFile = path.join(eventFolderPath, 'event-info.json');
      const eventInfo = JSON.parse(fs.readFileSync(eventInfoFile, 'utf8'));
      eventInfo.lastUpdated = new Date().toISOString();
      eventInfo.attendeeCount = attendees.length;
      eventInfo.confirmedCount = confirmedCount;
      
      fs.writeFileSync(eventInfoFile, JSON.stringify(eventInfo, null, 2));
      
      // Commit changes
      const gitInstance = await this.ensureGitInstance();
      await gitInstance.add('.');
      await gitInstance.commit(`Update event ${eventId}: ${attendees.length} attendees`);
      
      console.log(`✅ Updated event data for event ${eventId}`);
    } catch (error) {
      console.error('Error updating event data:', error);
      throw error;
    }
  }

  async exportEventToCSV(eventId, eventTitle) {
    try {
      const sanitizedTitle = this.sanitizeFolderName(eventTitle);
      const eventFolderPath = path.join(this.repoPath, `event-${eventId}-${sanitizedTitle}`);
      
      if (!fs.existsSync(eventFolderPath)) {
        throw new Error('Event folder not found');
      }
      
      const attendeesFile = path.join(eventFolderPath, 'attendees.json');
      const attendees = JSON.parse(fs.readFileSync(attendeesFile, 'utf8'));
      
      // Create CSV content
      const csvHeaders = ['Name', 'Email', 'Phone', 'Status', 'Plus One', 'Plus One Name', 'Dietary Restrictions', 'Notes', 'RSVP Date'];
      const csvRows = attendees.map(attendee => [
        attendee.name,
        attendee.email || '',
        attendee.phone || '',
        attendee.status,
        attendee.plus_one ? 'Yes' : 'No',
        attendee.plus_one_name || '',
        attendee.dietary_restrictions || '',
        attendee.notes || '',
        new Date(attendee.created_at).toLocaleDateString()
      ]);
      
      const csvContent = [csvHeaders, ...csvRows]
        .map(row => row.map(field => `"${field}"`).join(','))
        .join('\n');
      
      const csvFile = path.join(eventFolderPath, 'attendees.csv');
      fs.writeFileSync(csvFile, csvContent);
      
      // Commit CSV file
      const gitInstance = await this.ensureGitInstance();
      await gitInstance.add('.');
      await gitInstance.commit(`Export CSV for event ${eventId}`);
      
      return csvFile;
    } catch (error) {
      console.error('Error exporting event to CSV:', error);
      throw error;
    }
  }

  sanitizeFolderName(name) {
    return name
      .replace(/[^a-z0-9]/gi, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
      .toLowerCase()
      .substring(0, 50);
  }

  async getRepoStatus() {
    try {
      const gitInstance = await this.ensureGitInstance();
      const status = await gitInstance.status();
      const log = await gitInstance.log({ maxCount: 5 });
      
      return {
        status: status.files.length > 0 ? 'dirty' : 'clean',
        modifiedFiles: status.files.length,
        lastCommit: log.latest ? {
          hash: log.latest.hash,
          message: log.latest.message,
          date: log.latest.date
        } : null,
        totalCommits: log.total
      };
    } catch (error) {
      console.error('Error getting repo status:', error);
      return { error: error.message };
    }
  }
}

const gitService = new GitService();

module.exports = {
  initializeGitRepo: () => gitService.initializeGitRepo(),
  createEventFolder: (eventId, eventTitle) => gitService.createEventFolder(eventId, eventTitle),
  updateEventData: (eventId, eventTitle, attendees) => gitService.updateEventData(eventId, eventTitle, attendees),
  exportEventToCSV: (eventId, eventTitle) => gitService.exportEventToCSV(eventId, eventTitle),
  getRepoStatus: () => gitService.getRepoStatus()
};
